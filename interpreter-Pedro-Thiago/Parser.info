-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from Parser.y
-----------------------------------------------------------------------------

state 13 contains 12 shift/reduce conflicts.
state 19 contains 6 shift/reduce conflicts.
state 20 contains 6 shift/reduce conflicts.
state 21 contains 6 shift/reduce conflicts.
state 22 contains 6 shift/reduce conflicts.
state 23 contains 6 shift/reduce conflicts.
state 35 contains 12 shift/reduce conflicts.
state 37 contains 6 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Exp                               (0)
	Exp -> num                                         (1)
	Exp -> var                                         (2)
	Exp -> false                                       (3)
	Exp -> true                                        (4)
	Exp -> Exp '+' Exp                                 (5)
	Exp -> Exp '-' Exp                                 (6)
	Exp -> Exp '*' Exp                                 (7)
	Exp -> Exp "&&" Exp                                (8)
	Exp -> if Exp then Exp else Exp                    (9)
	Exp -> '\\' var ':' Type "->" Exp                  (10)
	Exp -> Exp Exp                                     (11)
	Exp -> '(' Exp ')'                                 (12)
	Exp -> Exp "==" Exp                                (13)
	Type -> Bool                                       (14)
	Type -> Number                                     (15)
	Type -> '(' Type "->" Type ')'                     (16)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	num            { TokenNum $$ }
	'+'            { TokenAdd }
	'-'            { TokenSub }
	'*'            { TokenMul }
	"&&"           { TokenAnd }
	"=="           { TokenEq }
	true           { TokenTrue }
	false          { TokenFalse }
	if             { TokenIf }
	then           { TokenThen }
	else           { TokenElse }
	var            { TokenVar $$ }
	'\\'           { TokenLam }
	':'            { TokenColon }
	"->"           { TokenArrow }
	'('            { TokenLParen }
	')'            { TokenRParen }
	Bool           { TokenBoolean }
	Number         { TokenNumber }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Exp             rules 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
	Type            rules 14, 15, 16

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Exp                              (rule 0)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 3

State 1

	Exp -> . num                                        (rule 1)

	num            shift, and enter state 2


State 2

	Exp -> num .                                        (rule 1)

	num            reduce using rule 1
	'+'            reduce using rule 1
	'-'            reduce using rule 1
	'*'            reduce using rule 1
	"&&"           reduce using rule 1
	"=="           reduce using rule 1
	true           reduce using rule 1
	false          reduce using rule 1
	if             reduce using rule 1
	then           reduce using rule 1
	else           reduce using rule 1
	var            reduce using rule 1
	'\\'           reduce using rule 1
	'('            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


State 3

	%start_parser -> Exp .                              (rule 0)
	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9
	%eof           accept

	Exp            goto state 13

State 4

	Exp -> true .                                       (rule 4)

	num            reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	"&&"           reduce using rule 4
	"=="           reduce using rule 4
	true           reduce using rule 4
	false          reduce using rule 4
	if             reduce using rule 4
	then           reduce using rule 4
	else           reduce using rule 4
	var            reduce using rule 4
	'\\'           reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 5

	Exp -> false .                                      (rule 3)

	num            reduce using rule 3
	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	"&&"           reduce using rule 3
	"=="           reduce using rule 3
	true           reduce using rule 3
	false          reduce using rule 3
	if             reduce using rule 3
	then           reduce using rule 3
	else           reduce using rule 3
	var            reduce using rule 3
	'\\'           reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 6

	Exp -> if . Exp then Exp else Exp                   (rule 9)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 12

State 7

	Exp -> var .                                        (rule 2)

	num            reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	"&&"           reduce using rule 2
	"=="           reduce using rule 2
	true           reduce using rule 2
	false          reduce using rule 2
	if             reduce using rule 2
	then           reduce using rule 2
	else           reduce using rule 2
	var            reduce using rule 2
	'\\'           reduce using rule 2
	'('            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 8

	Exp -> '\\' . var ':' Type "->" Exp                 (rule 10)

	var            shift, and enter state 11


State 9

	Exp -> '(' . Exp ')'                                (rule 12)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 10

State 10

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> '(' Exp . ')'                                (rule 12)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9
	')'            shift, and enter state 26

	Exp            goto state 13

State 11

	Exp -> '\\' var . ':' Type "->" Exp                 (rule 10)

	':'            shift, and enter state 25


State 12

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> if Exp . then Exp else Exp                   (rule 9)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	then           shift, and enter state 24
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 13

State 13

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp Exp .                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 11)

	'+'            shift, and enter state 14
			(reduce using rule 11)

	'-'            shift, and enter state 15
			(reduce using rule 11)

	'*'            shift, and enter state 16
			(reduce using rule 11)

	"&&"           shift, and enter state 17
			(reduce using rule 11)

	"=="           shift, and enter state 18
			(reduce using rule 11)

	true           shift, and enter state 4
			(reduce using rule 11)

	false          shift, and enter state 5
			(reduce using rule 11)

	if             shift, and enter state 6
			(reduce using rule 11)

	then           reduce using rule 11
	else           reduce using rule 11
	var            shift, and enter state 7
			(reduce using rule 11)

	'\\'           shift, and enter state 8
			(reduce using rule 11)

	'('            shift, and enter state 9
			(reduce using rule 11)

	')'            reduce using rule 11
	%eof           reduce using rule 11

	Exp            goto state 13

State 14

	Exp -> Exp '+' . Exp                                (rule 5)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 23

State 15

	Exp -> Exp '-' . Exp                                (rule 6)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 22

State 16

	Exp -> Exp '*' . Exp                                (rule 7)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 21

State 17

	Exp -> Exp "&&" . Exp                               (rule 8)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 20

State 18

	Exp -> Exp "==" . Exp                               (rule 13)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 19

State 19

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)
	Exp -> Exp "==" Exp .                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 13)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	"&&"           reduce using rule 13
	"=="           reduce using rule 13
	true           shift, and enter state 4
			(reduce using rule 13)

	false          shift, and enter state 5
			(reduce using rule 13)

	if             reduce using rule 13
	then           reduce using rule 13
	else           reduce using rule 13
	var            shift, and enter state 7
			(reduce using rule 13)

	'\\'           shift, and enter state 8
			(reduce using rule 13)

	'('            shift, and enter state 9
			(reduce using rule 13)

	')'            reduce using rule 13
	%eof           reduce using rule 13

	Exp            goto state 13

State 20

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp "&&" Exp .                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 8)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	"&&"           reduce using rule 8
	"=="           shift, and enter state 18
	true           shift, and enter state 4
			(reduce using rule 8)

	false          shift, and enter state 5
			(reduce using rule 8)

	if             reduce using rule 8
	then           reduce using rule 8
	else           reduce using rule 8
	var            shift, and enter state 7
			(reduce using rule 8)

	'\\'           shift, and enter state 8
			(reduce using rule 8)

	'('            shift, and enter state 9
			(reduce using rule 8)

	')'            reduce using rule 8
	%eof           reduce using rule 8

	Exp            goto state 13

State 21

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp '*' Exp .                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 7)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
			(reduce using rule 7)

	false          shift, and enter state 5
			(reduce using rule 7)

	if             reduce using rule 7
	then           reduce using rule 7
	else           reduce using rule 7
	var            shift, and enter state 7
			(reduce using rule 7)

	'\\'           shift, and enter state 8
			(reduce using rule 7)

	'('            shift, and enter state 9
			(reduce using rule 7)

	')'            reduce using rule 7
	%eof           reduce using rule 7

	Exp            goto state 13

State 22

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp '-' Exp .                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 6)

	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
			(reduce using rule 6)

	false          shift, and enter state 5
			(reduce using rule 6)

	if             reduce using rule 6
	then           reduce using rule 6
	else           reduce using rule 6
	var            shift, and enter state 7
			(reduce using rule 6)

	'\\'           shift, and enter state 8
			(reduce using rule 6)

	'('            shift, and enter state 9
			(reduce using rule 6)

	')'            reduce using rule 6
	%eof           reduce using rule 6

	Exp            goto state 13

State 23

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp '+' Exp .                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
			(reduce using rule 5)

	false          shift, and enter state 5
			(reduce using rule 5)

	if             reduce using rule 5
	then           reduce using rule 5
	else           reduce using rule 5
	var            shift, and enter state 7
			(reduce using rule 5)

	'\\'           shift, and enter state 8
			(reduce using rule 5)

	'('            shift, and enter state 9
			(reduce using rule 5)

	')'            reduce using rule 5
	%eof           reduce using rule 5

	Exp            goto state 13

State 24

	Exp -> if Exp then . Exp else Exp                   (rule 9)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 31

State 25

	Exp -> '\\' var ':' . Type "->" Exp                 (rule 10)

	'('            shift, and enter state 28
	Bool           shift, and enter state 29
	Number         shift, and enter state 30

	Type           goto state 27

State 26

	Exp -> '(' Exp ')' .                                (rule 12)

	num            reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	"&&"           reduce using rule 12
	"=="           reduce using rule 12
	true           reduce using rule 12
	false          reduce using rule 12
	if             reduce using rule 12
	then           reduce using rule 12
	else           reduce using rule 12
	var            reduce using rule 12
	'\\'           reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	%eof           reduce using rule 12


State 27

	Exp -> '\\' var ':' Type . "->" Exp                 (rule 10)

	"->"           shift, and enter state 34


State 28

	Type -> '(' . Type "->" Type ')'                    (rule 16)

	'('            shift, and enter state 28
	Bool           shift, and enter state 29
	Number         shift, and enter state 30

	Type           goto state 33

State 29

	Type -> Bool .                                      (rule 14)

	"->"           reduce using rule 14
	')'            reduce using rule 14


State 30

	Type -> Number .                                    (rule 15)

	"->"           reduce using rule 15
	')'            reduce using rule 15


State 31

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> if Exp then Exp . else Exp                   (rule 9)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	else           shift, and enter state 32
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 13

State 32

	Exp -> if Exp then Exp else . Exp                   (rule 9)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 37

State 33

	Type -> '(' Type . "->" Type ')'                    (rule 16)

	"->"           shift, and enter state 36


State 34

	Exp -> '\\' var ':' Type "->" . Exp                 (rule 10)

	num            shift, and enter state 2
	true           shift, and enter state 4
	false          shift, and enter state 5
	if             shift, and enter state 6
	var            shift, and enter state 7
	'\\'           shift, and enter state 8
	'('            shift, and enter state 9

	Exp            goto state 35

State 35

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> '\\' var ':' Type "->" Exp .                 (rule 10)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 10)

	'+'            shift, and enter state 14
			(reduce using rule 10)

	'-'            shift, and enter state 15
			(reduce using rule 10)

	'*'            shift, and enter state 16
			(reduce using rule 10)

	"&&"           shift, and enter state 17
			(reduce using rule 10)

	"=="           shift, and enter state 18
			(reduce using rule 10)

	true           shift, and enter state 4
			(reduce using rule 10)

	false          shift, and enter state 5
			(reduce using rule 10)

	if             shift, and enter state 6
			(reduce using rule 10)

	then           reduce using rule 10
	else           reduce using rule 10
	var            shift, and enter state 7
			(reduce using rule 10)

	'\\'           shift, and enter state 8
			(reduce using rule 10)

	'('            shift, and enter state 9
			(reduce using rule 10)

	')'            reduce using rule 10
	%eof           reduce using rule 10

	Exp            goto state 13

State 36

	Type -> '(' Type "->" . Type ')'                    (rule 16)

	'('            shift, and enter state 28
	Bool           shift, and enter state 29
	Number         shift, and enter state 30

	Type           goto state 38

State 37

	Exp -> Exp . '+' Exp                                (rule 5)
	Exp -> Exp . '-' Exp                                (rule 6)
	Exp -> Exp . '*' Exp                                (rule 7)
	Exp -> Exp . "&&" Exp                               (rule 8)
	Exp -> if Exp then Exp else Exp .                   (rule 9)
	Exp -> Exp . Exp                                    (rule 11)
	Exp -> Exp . "==" Exp                               (rule 13)

	num            shift, and enter state 2
			(reduce using rule 9)

	'+'            shift, and enter state 14
	'-'            shift, and enter state 15
	'*'            shift, and enter state 16
	"&&"           shift, and enter state 17
	"=="           shift, and enter state 18
	true           shift, and enter state 4
			(reduce using rule 9)

	false          shift, and enter state 5
			(reduce using rule 9)

	if             fail
	then           reduce using rule 9
	else           reduce using rule 9
	var            shift, and enter state 7
			(reduce using rule 9)

	'\\'           shift, and enter state 8
			(reduce using rule 9)

	'('            shift, and enter state 9
			(reduce using rule 9)

	')'            reduce using rule 9
	%eof           reduce using rule 9

	Exp            goto state 13

State 38

	Type -> '(' Type "->" Type . ')'                    (rule 16)

	')'            shift, and enter state 39


State 39

	Type -> '(' Type "->" Type ')' .                    (rule 16)

	"->"           reduce using rule 16
	')'            reduce using rule 16


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 17
Number of terminals: 19
Number of non-terminals: 3
Number of states: 40
